// cmangos_discord_bot.ts ‚Äî –≤–µ—Ä—Å–∏—è —Å deferReply –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º Unknown interaction (10062)
// ---------------------------------------------------------------------------------
// –ò–∑–º–µ–Ω–µ–Ω–∏—è:
//   ‚Ä¢ handleStatusCommand: —Å—Ä–∞–∑—É interaction.deferReply({ flags: 1 << 6 })  // EPHEMERAL
//     –∑–∞—Ç–µ–º interaction.editReply() ‚Äì –∏–∑–±–∞–≤–ª—è–µ–º—Å—è –æ—Ç 3‚Äë—Å–µ–∫. –ª–∏–º–∏—Ç–∞ –∏ warning ¬´ephemeral deprecated¬ª.
//   ‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç ChatInputCommandInteraction –∫–∞–∫ type.
//   ‚Ä¢ –£–¥–∞–ª–µ–Ω—ã —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏.

import {
    ActivityType,
    Client,
    ColorResolvable,
    EmbedBuilder,
    Events,
    GatewayIntentBits,
    REST,
    Routes,
    SlashCommandBuilder,
  } from "discord.js";
  import type { ChatInputCommandInteraction } from "discord.js";
  import * as dotenv from "dotenv";
  import net from "node:net";
  import mysql from "mysql2/promise";
  
  dotenv.config();
  
  // ---------- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ----------
  const {
    DISCORD_TOKEN,
    APPLICATION_ID,
    GUILD_ID,
    MYSQL_HOST = "127.0.0.1",
    MYSQL_PORT = "3306",
    MYSQL_USER = "mangos",
    MYSQL_PASSWORD = "mangos",
    CHAR_DB = "characters",
    WORLD_HOST = MYSQL_HOST,
    WORLD_PORT = "8085",
    STATUS_CHANNEL_ID,
    UPDATE_INTERVAL = "60",
  } = process.env;
  
  if (!DISCORD_TOKEN) throw new Error("DISCORD_TOKEN –Ω–µ –∑–∞–¥–∞–Ω");
  if (!APPLICATION_ID) throw new Error("APPLICATION_ID –Ω–µ –∑–∞–¥–∞–Ω");
  
  // ---------- –ü—Ä–æ–≤–µ—Ä–∫–∞ TCP‚Äë–ø–æ—Ä—Ç–∞ ----------
  function isPortOpen(host: string, port: number, timeoutMs = 2000): Promise<boolean> {
    return new Promise((resolve) => {
      const socket = new net.Socket();
      const finish = (ok: boolean): void => {
        socket.destroy();
        resolve(ok);
      };
      socket.setTimeout(timeoutMs);
      socket.once("error", () => finish(false));
      socket.once("timeout", () => finish(false));
      socket.connect(port, host, () => finish(true));
    });
  }
  
  // ---------- MySQL ----------
  const pool = mysql.createPool({
    host: MYSQL_HOST,
    port: Number(MYSQL_PORT),
    user: MYSQL_USER,
    password: MYSQL_PASSWORD,
    database: CHAR_DB,
    connectionLimit: 5,
    charset: "utf8mb4_general_ci",
  });
  
  interface PlayerRow extends mysql.RowDataPacket {
    name: string;
    race: number;
    class: number;
  }
  
  async function fetchOnlinePlayers(): Promise<PlayerRow[]> {
    const [rows] = await pool.query<PlayerRow[]>(
      "SELECT name, race, class FROM characters WHERE online=1 ORDER BY name;",
    );
    return rows;
  }
  
  // ---------- Discord client ----------
  const client = new Client({ intents: [GatewayIntentBits.Guilds] });
  let lastServerOnline: boolean | null = null;
  
  async function gatherStatus(): Promise<{ online: boolean; players: PlayerRow[] }> {
    const online = await isPortOpen(WORLD_HOST, Number(WORLD_PORT));
    const players = online ? await fetchOnlinePlayers().catch(() => []) : [];
    return { online, players };
  }
  
  async function updatePresenceOnce(): Promise<void> {
    const { online, players } = await gatherStatus();
  
    await client.user?.setPresence({
      activities: [
        {
          name: online ? `‚ú¶ ${players.length} –∏–≥—Ä–æ–∫–æ–≤ –æ–Ω–ª–∞–π–Ω` : "‚úñ –°–µ—Ä–≤–µ—Ä –æ—Ñ–ª–∞–π–Ω",
          type: ActivityType.Playing,
        },
      ],
      status: online ? "online" : "idle",
    });
  
    if (lastServerOnline !== null && lastServerOnline !== online && STATUS_CHANNEL_ID) {
      const channel = await client.channels.fetch(STATUS_CHANNEL_ID);
      if (channel?.isTextBased() && "send" in channel) {
        await (channel as any).send(online ? "üåê **–°–µ—Ä–≤–µ—Ä –æ–Ω–ª–∞–π–Ω!**" : "üîª **–°–µ—Ä–≤–µ—Ä –æ—Ñ–ª–∞–π–Ω.**").catch(console.error);
      }
    }
    lastServerOnline = online;
  }
  
  // ---------- Slash‚Äë–∫–æ–º–∞–Ω–¥–∞ /status ----------
  async function handleStatusCommand(interaction: ChatInputCommandInteraction) {
    // Discord –∂–¥—ë—Ç –æ—Ç–≤–µ—Ç ‚â§3¬†—Å; —Å—Ä–∞–∑—É –æ—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
    await interaction.deferReply({ flags: 1 << 6 /* EPHEMERAL */ });
  
    const { online, players } = await gatherStatus();
    const colour: ColorResolvable = online ? "Green" : "Red";
  
    const embed = new EmbedBuilder()
      .setTitle("–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ CMaNGOS")
      .setColor(colour)
      .addFields(
        { name: "–°—Ç–∞—Ç—É—Å", value: online ? "–û–Ω–ª–∞–π–Ω ‚úÖ" : "–û—Ñ–ª–∞–π–Ω ‚ùå", inline: false },
        { name: "–ò–≥—Ä–æ–∫–æ–≤ –æ–Ω–ª–∞–π–Ω", value: String(players.length), inline: false },
      );
    if (online && players.length) {
      embed.addFields({
        name: "–ü–µ—Ä—Å–æ–Ω–∞–∂–∏",
        value: players.map((p) => p.name).join("\n").slice(0, 1024),
        inline: false,
      });
    }
  
    await interaction.editReply({ embeds: [embed] });
  }
  
  // ---------- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è Slash‚Äë–∫–æ–º–∞–Ω–¥ ----------
  async function registerCommands() {
    const rest = new REST({ version: "10" }).setToken(DISCORD_TOKEN!);
    const commands = [
      new SlashCommandBuilder().setName("status").setDescription("–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞"),
    ].map((c) => c.toJSON());
  
    if (GUILD_ID) {
      await rest.put(Routes.applicationGuildCommands(APPLICATION_ID!, GUILD_ID!), { body: commands });
      console.log("‚úÖ Slash‚Äë–∫–æ–º–∞–Ω–¥—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ (guild)");
    } else {
      await rest.put(Routes.applicationCommands(APPLICATION_ID!), { body: commands });
      console.log("‚úÖ Slash‚Äë–∫–æ–º–∞–Ω–¥—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≥–ª–æ–±–∞–ª—å–Ω–æ");
    }
  }
  
  // ---------- –°–æ–±—ã—Ç–∏—è ----------
  client.once(Events.ClientReady, async () => {
    console.log(`–ë–æ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª—Å—è –∫–∞–∫ ${client.user?.tag}`);
    await registerCommands();
    await updatePresenceOnce();
    setInterval(updatePresenceOnce, Number(UPDATE_INTERVAL) * 1000).unref();
  });
  
  client.on(Events.InteractionCreate, async (interaction) => {
    if (!interaction.isChatInputCommand()) return;
    if (interaction.commandName === "status") await handleStatusCommand(interaction);
  });
  
  // ---------- –ó–∞–ø—É—Å–∫ ----------
  client.login(DISCORD_TOKEN).catch((err) => {
    console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ª–æ–≥–∏–Ω–∏—Ç—å—Å—è –≤ Discord:", err);
    process.exit(1);
  });
  